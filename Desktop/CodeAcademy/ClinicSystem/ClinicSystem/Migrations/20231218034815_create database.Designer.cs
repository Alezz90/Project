// <auto-generated />
using System;
using ClinicSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClinicSystem.Migrations
{
    [DbContext(typeof(DataContextClinic))]
    [Migration("20231218034815_create database")]
    partial class createdatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ClinicSystem.Model.Appointment", b =>
                {
                    b.Property<int>("AppointentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointentID"), 1L, 1);

                    b.Property<DateTime>("appoinDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("appoinTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("person_ID")
                        .HasColumnType("int");

                    b.Property<int>("specialization_ID")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppointentID");

                    b.HasIndex("person_ID");

                    b.HasIndex("specialization_ID");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("ClinicSystem.Model.Person", b =>
                {
                    b.Property<int>("Person_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Person_Id"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("phoneNumber")
                        .HasColumnType("int");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Person_Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("ClinicSystem.Model.Specialization", b =>
                {
                    b.Property<int>("SpeciaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpeciaID"), 1L, 1);

                    b.Property<string>("Specia_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpeciaID");

                    b.ToTable("specialization");
                });

            modelBuilder.Entity("ClinicSystem.Model.Appointment", b =>
                {
                    b.HasOne("ClinicSystem.Model.Person", "person")
                        .WithMany("Appointment")
                        .HasForeignKey("person_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClinicSystem.Model.Specialization", "specialization")
                        .WithMany("Appointment")
                        .HasForeignKey("specialization_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("person");

                    b.Navigation("specialization");
                });

            modelBuilder.Entity("ClinicSystem.Model.Person", b =>
                {
                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("ClinicSystem.Model.Specialization", b =>
                {
                    b.Navigation("Appointment");
                });
#pragma warning restore 612, 618
        }
    }
}
